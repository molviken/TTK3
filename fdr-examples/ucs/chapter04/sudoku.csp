-- sudoku.csp

-- Basic codings of sudoku puzzles: see Section 4.1 of 
-- Understanding concurrent systems, by A.W. Roscoe

-- Here is the small (6x6) puzzle described in the text.
-- There are larger ones for you to try at the bottom.
-- We include a blank of each size to make it easy for you
-- to enter your own hints.

-- For explanation of the coding, see the book.

puzzle = <<0,1,0, 0,0,0>,
          <2,0,0, 0,0,0>,

          <0,0,0, 0,0,3>,
          <0,0,0, 1,4,0>,

          <0,0,5, 0,0,2>,
          <0,0,0, 0,0,0>>

a = 2
b = 3

{-
puzzle = <<0,0,0, 0,0,6>,
          <0,2,4, 0,0,0>,

          <0,1,0, 0,3,0>,
          <3,0,0, 0,2,0>,

          <0,0,0, 5,0,4>,
          <0,0,0, 0,0,0>>

-}
{-
puzzle = <<0,0,0, 0,0,0>,
          <0,0,0, 0,0,0>,

          <0,0,0, 0,0,0>,
          <0,0,0, 0,0,0>,

          <0,0,0, 0,0,0>,
          <0,0,0, 0,0,0>>
-}

ab = a*b   -- for convenience and efficiency

Coord = {0..ab-1}
Coords = {(i,j) | i <- Coord, j <- Coord}
Symbol = {1..ab}

Row(i) = {(i,j) | j <- Coord} 
Col(j) = {(i,j) | i <- Coord} 
Box(i,j) = {(i*a+k,j*b+l) | k <- {0..a-1}, l <- {0..b-1}}

channel done
channel select:Coords.Symbol

nhd((i,j)) = Union({Row(i),Col(j),Box(i/a,j/b)})
adj(p) = diff(nhd(p),{p})

init((i,j)) = nth(j,nth(i,puzzle))

-- The Memo coding which records which options are
-- left for a square:

EmptyM(p,X) = select.p?v:X -> FullM(p)
              [] select?q:adj(p)?v -> EmptyM(p,diff(X,{v}))

FullM(p) = select?q:adj(p)?v -> FullM(p)
           [] done -> FullM(p)



-- The Block coding which has full squares
-- block related ones from having the same symbol

EmptyB(p) = select.p?v -> FullB(p,v)
            [] select?q:adj(p)?v -> EmptyB(p)

FullB(p,v) = select?q:adj(p)?w:diff(Symbol,{v}) 
                                  -> FullB(p,v)
             [] done -> FullB(p,v)

CellM(p) = if init(p)==0 then EmptyM(p,diff(Symbol,{init(q) | q <- nhd(p)}))
                         else FullM(p)

CellB(p) = if init(p)==0 then EmptyB(p)
                         else FullB(p,init(p))

-- Putting together inefficient versions of these:

Alpha(p) = {|select.q, done | q <- nhd(p)|}

PuzzleM = || p:Coords @ [Alpha(p)]CellM(p)
PuzzleB = || p:Coords @ [Alpha(p)]CellB(p)

assert CHAOS({|select|}) [T= PuzzleM
assert CHAOS({|select|}) [T= PuzzleB

-- The raster scan order for filling in squares:

scan = <(i,j) | i <- <0..ab-1>, 
                 j <- <0..ab-1>, init((i,j))==0>

Reg(<>) = STOP
Reg(<p>^ps) = select.p?v -> Reg(ps)

-- leading to more efficient codings

RegPuzzleM = Reg(scan) [|{|select|}|] PuzzleM
RegPuzzleB = Reg(scan) [|{|select|}|] PuzzleB
assert CHAOS({|select|}) [T= RegPuzzleM
assert CHAOS({|select|}) [T= RegPuzzleB


-- Coding with additional synchronisation
-- Gives less states but takes longer thanks to compilation time.
-- See later file under Chapter 5 for improved compilation time.

EmptyM2(p,X) = 
card(X)>0 & (select.p?v:X -> FullM2(p)
          [] select?q:adj(p)?v -> EmptyM2(p,diff(X,{v}))
          [] select?q:diff(Coords,nhd(p))?v -> EmptyM2(p,X))

FullM2(p) = select?q:diff(Coords,{p})?v -> FullM2(p)
           [] done -> FullM2(p)

CellM2(p) = if init(p)==0 then EmptyM2(p,diff(Symbol,{init(q) | q <- nhd(p)}))
                         else FullM2(p)

PuzzleM2 = [|Events|] p:Coords @ CellM2(p)

RegPuzzleM2 = Reg(scan) [|{|select|}|] PuzzleM2

assert CHAOS({|select|}) [T= RegPuzzleM2

nth(0,xs) = head(xs)
nth(n,xs) = nth(n-1,tail(xs))



{- More puzzles to try

a=3
b=3  -- the usual 9x9 puzzle format

puzzle = <<0,0,9,0,2,3,1,0,7>,
          <0,0,5,0,6,7,8,0,0>,
          <0,0,0,8,0,0,0,0,0>,
          <0,1,0,4,0,0,9,0,3>,
          <0,0,0,0,5,0,0,0,0>,
          <7,0,2,0,0,9,0,1,0>,
          <0,0,0,0,0,5,0,0,0>,
          <0,0,7,9,4,0,2,0,0>,
          <6,0,4,2,7,0,5,0,0>>

puzzle = <<0,0,0,0,0,0,0,0,0>,
          <0,0,0,0,0,0,0,0,0>,
          <0,0,0,0,0,0,0,0,0>,
          <0,0,0,0,0,0,0,0,0>,
          <0,0,0,0,0,0,0,0,0>,
          <0,0,0,0,0,0,0,0,0>,
          <0,0,0,0,0,0,0,0,0>,
          <0,0,0,0,0,0,0,0,0>,
          <0,0,0,0,0,0,0,0,0>>

--- The following 16x16 puzzles are marginal for this file:
-- some work well, some take a long time.

a = 4
b = 4   -- so we get 4x4 blocks in a 16x16 square.

puzzle = << 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>

puzzle = <
          <15,11, 0, 6,12, 0, 7, 8, 1,13, 0, 0, 4,10, 0,16>,
          < 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0>,
          < 0, 0, 0, 0, 0, 9, 1, 0, 0,10, 0, 0, 0, 0, 0, 0>,
          < 0, 0,13,12, 5, 4, 6,11, 8, 3, 2, 0,15, 0, 0, 0>,
          < 9,10,11, 0, 2, 0, 0, 0, 3,12, 5, 8,14, 0, 0, 0>,
          < 0,14, 8,13, 6,10, 0, 0, 7, 1, 0, 4, 3, 5, 0, 0>,
          < 0, 0, 3, 0, 0, 0, 8,12,14, 2, 0, 9, 0, 0, 0,11>,
          < 0,16, 0, 0,15, 0, 5, 0,13,11, 6,10, 9, 8, 0, 0>,
          < 1, 6, 0, 0, 0, 0, 0, 2, 0,16, 0,14,13,15, 3, 8>,
          < 2, 3,16, 0, 7,15, 9, 6, 0, 0,12,13,11,14, 1, 0>,
          < 5, 7, 0,14, 8, 0,12,13,15, 0, 0, 0, 0, 0, 9,10>,
          < 0, 9,15,10, 3, 0,16,14, 5, 8,11, 2,12, 6, 7, 0>,
          < 0, 0, 0, 7,11, 0,15, 0, 0, 5, 3, 0,16, 0, 6, 0>,
          < 3,12, 2, 0, 0, 0,14, 5,11, 0, 0, 0, 0, 1, 0, 0>,
          < 0, 0, 0,15, 0, 0, 0, 0,16, 0, 0, 0, 0, 0, 0, 0>,
          <16, 0,10, 4, 9, 0, 0, 0, 2,14, 8,15, 0, 0,11,13>
         >

a=4
b=4
puzzle = << 0, 0, 0, 0, 0,10,07,01,14,16,04, 0,12, 0,08,11>,
          <08, 0, 0,10,11, 0, 0, 0,12,15, 0, 0, 0, 0,06, 0>,
          < 0,01,03, 0,12,06,16, 0, 0,07,09,05, 0, 0,02,10>,
          < 0, 0, 0,16, 0,05,13,08,06, 0, 0, 0, 0,14, 0,01>,
          <01, 0, 0, 0,09,02, 0, 0, 0, 0,07, 0, 0,04,13, 0>,
          <14,11, 0,03, 0,04,08, 0, 0, 0,16, 0, 0,15, 0, 0>,
          < 0, 0,15,07, 0, 0,06,16,11,05,08,01,09, 0, 0, 0>,
          < 0,09, 0,13, 0, 0, 0, 0, 0, 0,06,10, 0,07, 0, 0>,
          <06,10, 0, 0,02, 0,04,09, 0,11, 0,16, 0, 0,15,12>,
          < 0,03, 0, 0, 0, 0, 0, 0,07, 0, 0, 0,08, 0, 0, 0>,
          < 0,08, 0,04,01,15, 0,07,10,03,12,06, 0,11,09,02>,
          <11,05,09,15,03,14,12, 0, 0,01,02, 0,13, 0,07,16>,
          <13,06,02,01,10,12,15,04,16, 0,03, 0, 0,05,14, 0>,
          <03, 0,14,08, 0,07, 0, 0, 0, 0, 0, 0, 0, 0,11, 0>,
          <07, 0, 0,05, 0, 0,02,06, 0, 0, 0,04,16,03,01,15>,
          <10,15,16,09,14, 0, 0, 0,13, 0, 0, 0, 0,08, 0, 0>>

a=4
b=4
puzzle = << 0, 0, 0, 0, 0, 0, 0, 0,14, 0, 0, 0, 0, 0, 0, 0>,
          <08, 0, 0, 0, 0, 0, 0, 0,12,15, 0, 0, 0, 0, 0, 0>,
          < 0,01,03, 0,12,06,16, 0, 0,07,09,05, 0, 0,02,10>,
          < 0, 0, 0,16, 0,05,13,08,06, 0, 0, 0, 0,14, 0,01>,
          <01, 0, 0, 0,09,02, 0, 0, 0, 0,07, 0, 0,04,13, 0>,
          <14,11, 0,03, 0,04,08, 0, 0, 0,16, 0, 0,15, 0, 0>,
          < 0, 0,15,07, 0, 0,06,16,11,05,08,01,09, 0, 0, 0>,
          < 0,09, 0,13, 0, 0, 0, 0, 0, 0,06,10, 0,07, 0, 0>,
          <06,10, 0, 0,02, 0,04,09, 0,11, 0,16, 0, 0,15,12>,
          < 0,03, 0, 0, 0, 0, 0, 0,07, 0, 0, 0,08, 0, 0, 0>,
          < 0,08, 0, 0,01,15, 0,07,10,03,12,06, 0,11,09,02>,
          <11,05,09,15,03, 0,12, 0, 0,01,02, 0,13, 0,07,16>,
          <13,06,02,01,10,12,15,04,16, 0,03, 0, 0,05,14, 0>,
          <03, 0,14,08, 0,07, 0, 0, 0, 0, 0, 0, 0, 0,11, 0>,
          <07, 0, 0,05, 0, 0,02,06, 0, 0, 0,04,16,03,01,15>,
          <10,15,16,09,14, 0, 0, 0,13, 0, 0, 0, 0,08, 0, 0>>

a=4
b=4
puzzle = << 0, 0,14,10,04, 0,05,15, 0,12,09,03, 0, 0,13, 0>,
          < 0, 0, 0,07,13,09, 0,03,16,06,10,02,12,15,01, 0>,
          <15,16, 0, 0, 0, 0,02,12,01, 0, 0, 0, 0,14,06,05>,
          <01,13, 0, 0, 0, 0, 0, 0, 0,08, 0, 0, 0, 0, 0,04>,
          < 0,14, 0, 0, 0, 0, 0, 0, 0, 0,03,11, 0, 0, 0, 0>,
          <04,12,02, 0,16, 0,10, 0, 0, 0, 0, 0,15, 0, 0, 0>,
          < 0, 0, 0, 0,06,07,08,09,02,04, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0,06, 0, 0, 0, 0, 0, 0,12, 0,11,07, 0, 0>,
          < 0, 0,04,03, 0, 0,09, 0, 0, 0, 0, 0, 0, 0,16,08>,
          <02, 0,13, 0,01,03,04,05, 0, 0,16, 0, 0, 0,14, 0>,
          < 0, 0, 0, 0, 0,14,06, 0,15,09,08,07,04, 0, 0, 0>,
          < 0, 0,15,16, 0, 0, 0,07,10, 0, 0, 0, 0,09,11, 0>,
          < 0, 0,08, 0, 0, 0, 0, 0, 0,10, 0, 0,03,11,04, 0>,
          < 0, 0,01, 0, 0, 0, 0, 0, 0, 0,11, 0, 0, 0, 0,02>,
          < 0,05,07,09,02,11, 0,04, 0, 0, 0,06, 0,16, 0, 0>,
          < 0, 0, 0,14,03,10,01, 0, 0, 0, 0, 0,08, 0,15,12>>

a=4
b=4
puzzle = << 0,03,07,02,04, 0, 0, 0, 0,11,01, 0,14, 0,05,16>,
          <04,15,05,09, 0, 0,10, 0, 0, 0,13,16, 0, 0,01, 0>,
          < 0, 0,16,06, 0, 0, 0, 0, 0, 0, 0, 0, 0,02, 0, 0>,
          <14,01, 0, 0, 0, 0, 0,13,02,07,15,03, 0,12, 0, 0>,
          < 0, 0, 0, 0, 0, 0,16,04, 0,02,07,08,05, 0,06, 0>,
          < 0,05, 0, 0,11,14,07,01, 0,04,12, 0,10, 0,16, 0>,
          < 0, 0,08,10,02, 0, 0, 0,05,06, 0,14, 0, 0,07,12>,
          <02, 0, 0, 0, 0, 0, 0, 0,10, 0, 0,09,13, 0, 0, 0>,
          <03,09,04, 0,10, 0,12,11, 0, 0, 0, 0,06, 0, 0,15>,
          < 0, 0, 0, 0, 0, 0, 0, 0,04, 0, 0,05,01, 0, 0, 0>,
          <01, 0, 0, 0,08,07, 0, 0, 0, 0, 0,06, 0, 0, 0,09>,
          < 0,02, 0,15,05, 0, 0, 0, 0, 0,16,11, 0,10, 0, 0>,
          < 0, 0, 0, 0,07, 0,02,10,14,01,09,13,08,15,12, 0>,
          < 0, 0, 0,07,13,04,06,16, 0, 0, 0,02,03,11,10, 0>,
          <10, 0,03, 0,14,08, 0, 0, 0, 0, 0, 0, 0,16, 0, 0>,
          < 0, 0, 0,08,12,01, 0, 0, 0, 0, 0,04, 0, 0,13,14>>

a=4
b=4
puzzle = << 0, 0, 0, 6, 0, 3, 1, 0, 7,11, 0, 0, 0, 0, 2,12>,
          < 0, 8, 0, 7, 9,13, 0, 0, 0, 0, 0,12, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 6, 0, 0, 0,13, 0, 0, 0, 0, 0, 0,10>,
          < 0,16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0>,
          < 0,13, 0, 0, 0, 0, 0,11, 4,14, 0, 6, 8, 0,10, 1>,
          < 0, 0, 9,10, 1,12, 3, 5, 2,15,16, 0,14, 4, 0, 0>,
          <14, 0, 0, 0, 0, 6, 0, 4, 3,12, 9, 5,11,13,16,15>,
          <15, 0, 0, 0,13, 7, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0>,
          <16, 3, 1, 0, 0, 0, 7,13,11,10, 8,15, 6,14,12, 0>,
          < 6, 0, 0, 5, 8, 0,16, 0,14, 2,12, 1, 0, 0, 0, 0>,
          < 2, 0, 0,15, 4, 0, 0,14, 0, 0, 0, 0, 5, 0, 0, 0>,
          < 0, 0, 0,11, 0, 1,12, 0, 0, 0, 0, 0,16, 0, 0, 9>,
          < 4, 0,12, 0, 0, 0,11, 0, 0, 0, 0, 8, 7,10, 6,13>,
          <10, 0, 0,14, 0, 0, 0, 0, 1, 0, 0, 0, 9, 5, 0, 0>,
          < 0, 0, 0, 0, 0,14, 0,15, 6, 0, 0, 0, 0, 3, 1, 0>,
          < 0, 6, 7, 0, 0, 0, 5, 0, 0, 0,15, 3, 0,11, 0, 4>>
-}


