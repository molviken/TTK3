


-- Trivial Cloud Example

-- using timed noninterference constructions

-- Bill Roscoe, May 2012

external prioritise_nocache
prioritise = prioritise_nocache

-- Standard timing priority operator

pri(P) = prioritise(P,<{},{tock}>)

-- Agent names and relationships

--datatype Agent = hugh | lois | henry
--HAgent = {hugh,henry}
datatype Agent = hugh | lois 
HAgent = {hugh}
LAgent = {lois}

writeable(a) = if member(a,HAgent) then {0} else {1}
--readable(a) = if member(a,HAgent) then {0} else {0,1}  -- elementary flow
readable(a) = if member(a,HAgent) then {0} else {1}


Vars = {0..1}

datatype Jobs = Inc.Vars | Zero.Vars | Write.Vars.Ints | Read.Vars

-- simple set of tasks to do "in the cloud"

inc(x) = if x==MaxInt then MaxInt else x+1

MaxInt = 1

Ints = {0..MaxInt}

Procs = {1,2}  -- processors
Proclist = <1,2>

channel pin:Procs.Agent.Jobs -- job sent to processor
channel pout:Procs.Agent.Ints      -- results sent back to hypervisor
channel alloc,hrel:Agent.Procs
channel href,hreq:Agent
channel read,write:Vars.Procs.Ints
channel tock

Sigma = diff(Events,{tock,tock1,tock2,tock2',to1,to2})

-- Partition of Sigma into High and Low level events
H = {|trans.a,res.a,transover.a | a <- HAgent|}
L = {|trans.a,res.a,transover.a | a <- LAgent|}

-- extended to include alphabet of hypervisor
HX = union(H,{|alloc.a,hrel.a,href.a,hreq.a | a <- HAgent|})
LX = union(L,{|alloc.a,hrel.a,href.a,hreq.a | a <- LAgent|})

-- Some event timers

AllOne(_) = 1
AllTwo(_) = 2

Timed(AllOne){

-- A process can take in a job from a user and perform it

--

Var(v,j) = read.v?p!j -> Var(v,j)
           [] write.v?p?k -> Var(v,k)

-- Processor description: times introduced to make each interaction
-- with a processor take job-dependent time.

PROC(p) = (pin.p?a?Read.v ->
                 if member(v,readable(a)) then read.v.p?j -> 
                           (WAIT(4);pout.p.a.j -> hrel.a.p -> PROC(p))
                    else hrel.a.p -> PROC(p))
          [] (pin.p?a?Write.v.k ->
                 if member(v,writeable(a)) then write.v.p.k -> 
                           WAIT(5);hrel.a.p -> PROC(p)
                    else hrel.a.p -> PROC(p))
          [] (pin.p?a?Inc.v ->
                 if member(v,writeable(a)) then read.v.p?j -> 
                          (WAIT(2);write.v.p.inc(j) -> hrel.a.p -> PROC(p))
                    else hrel.a.p -> PROC(p))
          [] (pin.p?a?Zero.v ->
                 if member(v,writeable(a)) then 
                          WAIT(2);write.v.p.0 -> hrel.a.p -> PROC(p)
                    else hrel.a.p -> PROC(p))

count(map,a) = card({(a',p) | (a',p) <- map, eqlevel(a,a')})
limit(a) = if member(a,LAgent) then card(Procs)/2 else (card(Procs)+1)/2

-- partitioning the processors by number, not identity, between different levels

eqlevel(a,a') = a==a' or (card(inter({a,a'},LAgent)) != 1)

-- Hypervisor's role here is just to monitor which processors are
-- free and allocate them to Term processes when requested.

Hypervisor(map) = hreq?a -> 
                    (if count(map,a) < limit(a) then 
                      let newp = select(map) within 
                      alloc.a.newp -> Hypervisor(union(map,{(a,newp)}))
                    else href.a -> Hypervisor(map))
                 [] hrel?a?p -> Hypervisor(diff(map,{(a,p)}))

select(map) = head(<p | p <- Proclist, not(member(p,{p' | (_,p') <- map}))>)

channel trans:Agent.Jobs
channel transover:Agent
channel res:Agent.Ints

delta = 3


-- Model of a process that acts as intermediary between user and Hypervisor/
-- Processors.

Term(a) = trans.a?j -> hreq.a -> 
               (alloc.a?p -> pin.p.a.j -> Outs(p,a)
                [] href.a -> WAIT(delta);Term(a))

Outs(p,a) = hrel.a.p -> transover.a -> Term(a)
           [] pout.p.a?x -> res.a.x -> Outs(p,a)


VARS = ||| v:Vars @ Var(v,0)

PROCS = ||| p:Procs @ PROC(p)

TERMS = ||| a:Agent @ Term(a)

PPV = (VARS [|{|read,write|}|]PROCS)\{|read,write|}

TPH = ((TERMS [|{|alloc,href,hrel,hreq|}|] Hypervisor({}))\{|alloc,hreq,href|})

System = (TPH [|{|pin,pout,hrel|}|] PPV)\{|pin,pout,hrel|}

-- Definition of scheduler (parameterised version of one used in other files)

HS(X) = [] x:inter(X,HX) @ x -> HS(X)
LS(X) = [] x:inter(X,LX) @ x -> STOP

-- Scheduler allows high and low level events for fixed and alternating
-- periods, with gaps in between.  At most one low one is allowed in each
-- period to prevent a transient event that would be non-quasi-deterministic.

Sched(X,(HO,HB,LO,LB)) = (HS(X)/\WAIT(HO));WAIT(HB);(LS(X)/\WAIT(LO));
                          WAIT(LB);Sched(X,(HO,HB,LO,LB))

SchedSys = System[|Sigma|]Sched(Sigma,(2,6,4,2))

SchedHyp = Hypervisor({}) [|{|hreq,hrel|}|] Sched({|hreq,hrel|},(4,2,4,2))


SHTPH = (TERMS [|{|alloc,href,hrel,hreq|}|] SchedHyp)\{|alloc,hreq,href|}

SHSystem = (SHTPH [|{|pin,pout,hrel|}|] PPV)\{|pin,pout,hrel|}

DSSystem = SHSystem[|Sigma|]Sched(Sigma,(2,6,4,2))

}

-- Lazy abstractions that we can use in checks

AbsSys = LAbs(H)(System)
AbsSS = LAbs(H)(SchedSys)
AbsSHS = LAbs(H)(SHSystem)
AbsDSS = LAbs(H)(DSSystem)

-- Two-part checask of (quasi)-determinism: helps scalability and also to
-- allow us to see where nondeterminism comes from.

-- Unaltered system

assert pri(System[|H|] STOP):[deterministic]
assert LHS [F= prioritise(RHS(wbisim(pri(System[|H|]STOP))),<diff(Events,{tock2'}),{tock2'}>)
assert pri(System[|H|] STOP) [F= AbsSys

-- External Scheduling


assert pri(SchedSys[|H|] STOP):[deterministic]
assert LHS [F= prioritise(RHS(wbisim(pri(SchedSys[|H|]STOP))),<diff(Events,{tock2'}),{tock2'}>)
assert pri(SchedSys[|H|] STOP) [F= AbsSS

-- Scheduled hypervisor

assert pri(SHSystem[|H|] STOP):[deterministic]
assert LHS [F= prioritise(RHS(wbisim(pri(SHSystem[|H|]STOP))),<diff(Events,{tock2'}),{tock2'}>)
assert pri(SHSystem[|H|] STOP) [F= AbsSHS

assert LHS [F= prioritise(RHS(wbisim(pri(DSSystem[|H|]STOP))),<diff(Events,{tock2'}),{tock2'}>)
assert pri(DSSystem[|H|] STOP) [F= AbsDSS


-- Everything below here is standard definitions


-- Defining timed lazy abstraction.

LAbs(A)(P) = (CHAOST(A)[|union(A,{tock})|]pri(P))\A

CHAOST(A) = ([] x:A @ x -> CHAOST(A)) [> tock -> CHAOST(A)

-- The check for quasi-determinism

channel tock1, tock2, tock2'

-- We are going to set up a system in which copy 1 "leads" on non-tock events
-- and copy 2 "follows".  To ensure this order we give copy1 a token which
-- then passes backwards and forwards between the pair so they strictly
-- alternate on non-tock events:

 channel to1,to2

R1 =  ([] x:Sigma @ x -> to2 -> to1 ->  R1)

R2 = to2 -> ([] x:Sigma @ x -> to1 -> R2)


COPY1(P) = wbisim(P)[[tock <- tock1]][|Sigma|] R1 
COPY2(P) = wbisim(P)[[tock <- tock2, tock <- tock2']][|Sigma|] R2 

-- (Note that this construction does not allow properly for _tick)

-- The right-hand side of our   check becomes

RHS(P) = (COPY1(P) [|{to1,to2}|] COPY2(P))\{to1,to2} [|diff(Events,{to1,to2})|]MaxReg

-- where 

MaxReg = tock1 -> MaxRegt
         [] ([]x:Sigma @ x -> x -> MaxReg)

-- This is the state the regulator is in when the two copies are at parity
-- (in time and trace).

MaxRegt = [] x:Sigma @x -> MaxRegt'(x)
          [] tock1 -> tock2 -> MaxRegt

-- This is the state the regulator is in when COPY1 is one tock ahead:
-- if it does another then the second must perform tock to catch up to
-- only one behind.  If it does an event x then we must test that
-- either the other copy could not refuse it before its next tock, 
-- or that it cannot refuse it after.

MaxRegt'(x) = ((x -> STOP [] tock2' -> x -> MaxReg))|~|tock2 -> x -> MaxReg

-- The first branch of this |~| is what tests this under a priority assumption.

-- We give tock2' lower priority here than all other events.  Therefore if
-- tock2' is performed then x must have been refused, so x is offered
-- to check that it cannot be refused.

-- We know that the trace <tock2,x>  is possible in COPY2, though it
-- it is possible for the process to refuse x after tock2 in COPY2
-- and still behave properly.  So the specification will not say that
-- x must be accepted after tock2.  We actually need the second clause
-- to check subsequent behaviour when the x from COPY1 is refused after,
-- but not before, the tock2 of the first clause.

-- The STOP above corresponds with the case where an event after tock1
-- has been matched by one before tock2.  In that case the traces are
-- no longer the same so there is no more to check.


-- We compare this process against the failures specification:

LHS = (tock1 -> LHSt
      [] ([]x:Sigma@(x -> x -> LHS) ))
      |~| STOP

-- if COPY1 performs an initial x in Sigma, COPY2 must respond.

LHSt = (tock1 -> tock2 -> LHSt -- as with MaxRegt 
      [] (([] x:Sigma @x -> LHSt'(x))))
      |~| STOP
   

LHSt'(x) = ((x -> STOP |~| tock2' -> x -> LHS))
              |~|tock2 -> ((x -> LHS)|~| STOP)

transparent wbisim

