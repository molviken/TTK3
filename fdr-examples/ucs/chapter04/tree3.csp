

-- tree3.csp
-- routing tree with prior negotiation
-- For Section 4.2.1 of Understanding concurrent systems

T = {0} -- type of things passed along channels
          -- for the purpose of deadlock, T={0} is sufficient.

-- Building a tree

N = 5 -- number of nodes

Node = {0..N-1}

Edges = {{0,1}, {0,2}, {0,3}, {1,4}}

nbrs(r) = {j | j <- Node, member({j,r},Edges)}

Component(i,j) = let delta(X) = {k | k <- diff(Node,union({j},X)),
                                     card(inter(Edges,{{k,l}| l <- X}))>0}
                     close(X) = if card(delta(X))==0 then X
                                else close(union(X,delta(X)))
                     within close({i})

next(i,n) = let {j} = {k | k <- nbrs(i), member(n,Component(k,i))}
            within j  
            
------------------------------------
                    


channel send, receive:Node.Node.T

nametype packet = (Node,Node,T)

channel pass:Node.Node.packet
channel yes, no:Node.Node

NodeE3(i) = send.i?m?x -> NodeF3(i,(i,m,x))
       [] yes?j:nbrs(i)!i -> pass.j.i?p -> NodeF3(i,p)

NodeF3(i,(s,r,m)) = if i==r then receive.i.s.m -> NodeE3(i)
                else (yes.i.next(i,r) -> pass.i.next(i,r).(s,r,m) -> NodeE3(i)
                      [] no.i.next(i,r) -> NodeF3(i,(s,r,m)))
       [] no?j:nbrs(i)!i ->  NodeF3(i,(s,r,m))

A(i) = union({|pass.i.j, pass.j.i, yes.i.j, yes.j.i, 
                   no.i.j, no.j.i | j <- nbrs(i) |},
             {| send.i, receive.i|})

Tree = || i:Node @ [A(i)] NodeE3(i)

assert Tree :[deadlock free]

-- This tree is deadlock free but may make no progress: this is
-- is best demonstrated by divergence under hiding: see Chapters 5 and 6:

assert Tree\diff(Events,{|send,receive|}) :[divergence free]

