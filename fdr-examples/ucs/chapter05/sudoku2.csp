
-- sudoku2.csp

-- Bill Roscoe, Sept 2009 (based on scripts written in 2005)

{-
 This script solves "Sudoku" puzzles of the form found in newspapers

This modifies the initial version to use renaming for efficient
compilation.

Most puzzles are 9x9 squares, but in general one can form an (a*b)x(a*b)
one, comprising a*b bxa blocks, illustrated here for a=3, b=2. 

---------     The objective of the puzzle is to fill in the blanks so that
|X1X|3XX|     each row, column and axb block contains the digits 1..a*b.
|XX2|X1X|
---------     Clearly not all such puzzles are soluble, and some have multiple
|6XX|XX2|     solutions.  Newspaper and book ones invariably have exactly one
|XX5|XXX|     solution.
---------
|XX1|XX6|
|XXX|4XX|
---------

For the purposes of this script, to get a non-trivial puzzle, we will set
-}

a = 4
b = 4   -- so we get 4x4 blocks in a 16x16 square.
ab=a*b

-- We need a notation for describing a given puzzle to the script.
-- We use a square list-of-lists (a*b lists of length a*b) since
-- that allows a highly suggestive ASCII form as below.  Notice that
-- a and b are not uniquely determined by a*b, so do have to be quoted
-- separately.  (Or at least one of them does!)

-- We define symbol and co-ordinate spaces as follows:

Symbol = {1..ab}
Coord = {0..ab-1}
Coords = {(x,y) | x <- Coord, y <- Coord}
Coordlist = <(i,j) | i <- <0..ab-1>, j <- <0..ab-1>>
SList = <1..ab>


{-
The following are some puzzles, including an initial one that is all "blank"
to help you create your own.  To solve a particular one, just uncomment it.

puzzle = << 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>
-}
puzzle = <
          <15,11, 0, 6,12, 0, 7, 8, 1,13, 0, 0, 4,10, 0,16>,
          < 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0>,
          < 0, 0, 0, 0, 0, 9, 1, 0, 0,10, 0, 0, 0, 0, 0, 0>,
          < 0, 0,13,12, 5, 4, 6,11, 8, 3, 2, 0,15, 0, 0, 0>,
          < 9,10,11, 0, 2, 0, 0, 0, 3,12, 5, 8,14, 0, 0, 0>,
          < 0,14, 8,13, 6,10, 0, 0, 7, 1, 0, 4, 3, 5, 0, 0>,
          < 0, 0, 3, 0, 0, 0, 8,12,14, 2, 0, 9, 0, 0, 0,11>,
          < 0,16, 0, 0,15, 0, 5, 0,13,11, 6,10, 9, 8, 0, 0>,
          < 1, 6, 0, 0, 0, 0, 0, 2, 0,16, 0,14,13,15, 3, 8>,
          < 2, 3,16, 0, 7,15, 9, 6, 0, 0,12,13,11,14, 1, 0>,
          < 5, 7, 0,14, 8, 0,12,13,15, 0, 0, 0, 0, 0, 9,10>,
          < 0, 9,15,10, 3, 0,16,14, 5, 8,11, 2,12, 6, 7, 0>,
          < 0, 0, 0, 7,11, 0,15, 0, 0, 5, 3, 0,16, 0, 6, 0>,
          < 3,12, 2, 0, 0, 0,14, 5,11, 0, 0, 0, 0, 1, 0, 0>,
          < 0, 0, 0,15, 0, 0, 0, 0,16, 0, 0, 0, 0, 0, 0, 0>,
          <16, 0,10, 4, 9, 0, 0, 0, 2,14, 8,15, 0, 0,11,13>
         >
{-
puzzle = << 0, 0, 0, 0, 0,10,07,01,14,16,04, 0,12, 0,08,11>,
          <08, 0, 0,10,11, 0, 0, 0,12,15, 0, 0, 0, 0,06, 0>,
          < 0,01,03, 0,12,06,16, 0, 0,07,09,05, 0, 0,02,10>,
          < 0, 0, 0,16, 0,05,13,08,06, 0, 0, 0, 0,14, 0,01>,
          <01, 0, 0, 0,09,02, 0, 0, 0, 0,07, 0, 0,04,13, 0>,
          <14,11, 0,03, 0,04,08, 0, 0, 0,16, 0, 0,15, 0, 0>,
          < 0, 0,15,07, 0, 0,06,16,11,05,08,01,09, 0, 0, 0>,
          < 0,09, 0,13, 0, 0, 0, 0, 0, 0,06,10, 0,07, 0, 0>,
          <06,10, 0, 0,02, 0,04,09, 0,11, 0,16, 0, 0,15,12>,
          < 0,03, 0, 0, 0, 0, 0, 0,07, 0, 0, 0,08, 0, 0, 0>,
          < 0,08, 0,04,01,15, 0,07,10,03,12,06, 0,11,09,02>,
          <11,05,09,15,03,14,12, 0, 0,01,02, 0,13, 0,07,16>,
          <13,06,02,01,10,12,15,04,16, 0,03, 0, 0,05,14, 0>,
          <03, 0,14,08, 0,07, 0, 0, 0, 0, 0, 0, 0, 0,11, 0>,
          <07, 0, 0,05, 0, 0,02,06, 0, 0, 0,04,16,03,01,15>,
          <10,15,16,09,14, 0, 0, 0,13, 0, 0, 0, 0,08, 0, 0>>

puzzle = << 0, 0, 0, 0, 0, 0, 0, 0,14, 0, 0, 0, 0, 0, 0, 0>,
          <08, 0, 0, 0, 0, 0, 0, 0,12,15, 0, 0, 0, 0, 0, 0>,
          < 0,01,03, 0,12,06,16, 0, 0,07,09,05, 0, 0,02,10>,
          < 0, 0, 0,16, 0,05,13,08,06, 0, 0, 0, 0,14, 0,01>,
          <01, 0, 0, 0,09,02, 0, 0, 0, 0,07, 0, 0,04,13, 0>,
          <14,11, 0,03, 0,04,08, 0, 0, 0,16, 0, 0,15, 0, 0>,
          < 0, 0,15,07, 0, 0,06,16,11,05,08,01,09, 0, 0, 0>,
          < 0,09, 0,13, 0, 0, 0, 0, 0, 0,06,10, 0,07, 0, 0>,
          <06,10, 0, 0,02, 0,04,09, 0,11, 0,16, 0, 0,15,12>,
          < 0,03, 0, 0, 0, 0, 0, 0,07, 0, 0, 0,08, 0, 0, 0>,
          < 0,08, 0, 0,01,15, 0,07,10,03,12,06, 0,11,09,02>,
          <11,05,09,15,03, 0,12, 0, 0,01,02, 0,13, 0,07,16>,
          <13,06,02,01,10,12,15,04,16, 0,03, 0, 0,05,14, 0>,
          <03, 0,14,08, 0,07, 0, 0, 0, 0, 0, 0, 0, 0,11, 0>,
          <07, 0, 0,05, 0, 0,02,06, 0, 0, 0,04,16,03,01,15>,
          <10,15,16,09,14, 0, 0, 0,13, 0, 0, 0, 0,08, 0, 0>>
puzzle = << 0, 0,14,10,04, 0,05,15, 0,12,09,03, 0, 0,13, 0>,
          < 0, 0, 0,07,13,09, 0,03,16,06,10,02,12,15,01, 0>,
          <15,16, 0, 0, 0, 0,02,12,01, 0, 0, 0, 0,14,06,05>,
          <01,13, 0, 0, 0, 0, 0, 0, 0,08, 0, 0, 0, 0, 0,04>,
          < 0,14, 0, 0, 0, 0, 0, 0, 0, 0,03,11, 0, 0, 0, 0>,
          <04,12,02, 0,16, 0,10, 0, 0, 0, 0, 0,15, 0, 0, 0>,
          < 0, 0, 0, 0,06,07,08,09,02,04, 0, 0, 0, 0, 0, 0>,
          < 0, 0, 0,06, 0, 0, 0, 0, 0, 0,12, 0,11,07, 0, 0>,
          < 0, 0,04,03, 0, 0,09, 0, 0, 0, 0, 0, 0, 0,16,08>,
          <02, 0,13, 0,01,03,04,05, 0, 0,16, 0, 0, 0,14, 0>,
          < 0, 0, 0, 0, 0,14,06, 0,15,09,08,07,04, 0, 0, 0>,
          < 0, 0,15,16, 0, 0, 0,07,10, 0, 0, 0, 0,09,11, 0>,
          < 0, 0,08, 0, 0, 0, 0, 0, 0,10, 0, 0,03,11,04, 0>,
          < 0, 0,01, 0, 0, 0, 0, 0, 0, 0,11, 0, 0, 0, 0,02>,
          < 0,05,07,09,02,11, 0,04, 0, 0, 0,06, 0,16, 0, 0>,
          < 0, 0, 0,14,03,10,01, 0, 0, 0, 0, 0,08, 0,15,12>>

puzzle = << 0,03,07,02,04, 0, 0, 0, 0,11,01, 0,14, 0,05,16>,
          <04,15,05,09, 0, 0,10, 0, 0, 0,13,16, 0, 0,01, 0>,
          < 0, 0,16,06, 0, 0, 0, 0, 0, 0, 0, 0, 0,02, 0, 0>,
          <14,01, 0, 0, 0, 0, 0,13,02,07,15,03, 0,12, 0, 0>,
          < 0, 0, 0, 0, 0, 0,16,04, 0,02,07,08,05, 0,06, 0>,
          < 0,05, 0, 0,11,14,07,01, 0,04,12, 0,10, 0,16, 0>,
          < 0, 0,08,10,02, 0, 0, 0,05,06, 0,14, 0, 0,07,12>,
          <02, 0, 0, 0, 0, 0, 0, 0,10, 0, 0,09,13, 0, 0, 0>,
          <03,09,04, 0,10, 0,12,11, 0, 0, 0, 0,06, 0, 0,15>,
          < 0, 0, 0, 0, 0, 0, 0, 0,04, 0, 0,05,01, 0, 0, 0>,
          <01, 0, 0, 0,08,07, 0, 0, 0, 0, 0,06, 0, 0, 0,09>,
          < 0,02, 0,15,05, 0, 0, 0, 0, 0,16,11, 0,10, 0, 0>,
          < 0, 0, 0, 0,07, 0,02,10,14,01,09,13,08,15,12, 0>,
          < 0, 0, 0,07,13,04,06,16, 0, 0, 0,02,03,11,10, 0>,
          <10, 0,03, 0,14,08, 0, 0, 0, 0, 0, 0, 0,16, 0, 0>,
          < 0, 0, 0,08,12,01, 0, 0, 0, 0, 0,04, 0, 0,13,14>>
puzzle = << 0, 0, 0, 6, 0, 3, 1, 0, 7,11, 0, 0, 0, 0, 2,12>,
          < 0, 8, 0, 7, 9,13, 0, 0, 0, 0, 0,12, 0, 0, 0, 0>,
          < 0, 0, 0, 0, 6, 0, 0, 0,13, 0, 0, 0, 0, 0, 0,10>,
          < 0,16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0>,
          < 0,13, 0, 0, 0, 0, 0,11, 4,14, 0, 6, 8, 0,10, 1>,
          < 0, 0, 9,10, 1,12, 3, 5, 2,15,16, 0,14, 4, 0, 0>,
          <14, 0, 0, 0, 0, 6, 0, 4, 3,12, 9, 5,11,13,16,15>,
          <15, 0, 0, 0,13, 7, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0>,
          <16, 3, 1, 0, 0, 0, 7,13,11,10, 8,15, 6,14,12, 0>,
          < 6, 0, 0, 5, 8, 0,16, 0,14, 2,12, 1, 0, 0, 0, 0>,
          < 2, 0, 0,15, 4, 0, 0,14, 0, 0, 0, 0, 5, 0, 0, 0>,
          < 0, 0, 0,11, 0, 1,12, 0, 0, 0, 0, 0,16, 0, 0, 9>,
          < 4, 0,12, 0, 0, 0,11, 0, 0, 0, 0, 8, 7,10, 6,13>,
          <10, 0, 0,14, 0, 0, 0, 0, 1, 0, 0, 0, 9, 5, 0, 0>,
          < 0, 0, 0, 0, 0,14, 0,15, 6, 0, 0, 0, 0, 3, 1, 0>,
          < 0, 6, 7, 0, 0, 0, 5, 0, 0, 0,15, 3, 0,11, 0, 4>>
-}


-- There are 3 sorts of "domain" that have to be filled with the
-- full range of Symbols (necessarily with no repetition):

Row(i) = {(i,j) | j <- Coord}
Col(j) = {(i,j) | i <- Coord}
Box(r,s) = {(r*a+i,s*b+j) | i<-{0..a-1}, j<-{0..b-1}}
       -- for r in {0..b-1}, s <- {0..a-1}

-- For a given point in Coords, we can define the set of points
-- that neighbour it for the purpose of the game

nhd((i,j)) = Union({Row(i),Col(j),Box(i/a,j/b)})

-- and those that can't have the same number:

adj(p) = diff(nhd(p),{p})


-- The following functions extract details from a puzzle in the form above

nth(0,<x>^_) = x
nth(k,<x>^xs) = nth(k-1,xs)

init((i,j)) = nth(j,nth(i,puzzle))

-- Note that this numbers the co-ordinates with top left equal to (0,0),
-- i running down and j right.


-- In this file we define generic square processes using events that
-- can later be renamed

GVar = seladj?_ -> GVar
       [] selhere?v -> GFixed(v)

GFixed(v) = done -> GFixed(v)
         [] seladj?_:diff(Symbol,{v}) -> GFixed(v)

-- Compare with

Var(p) = (select?_:adj(p)?_ -> Var(p)
         [] select.p?v -> Fixed(p,v))


Fixed(p,v) = done -> Fixed(p,v)
             [] select?_:adj(p)?_:diff(Symbol,{v}) -> Fixed(p,v)

-- so the initial states are now...

Cell(p) = (if init(p)==0 then GVar
            else GFixed(init(p)))
          [[selhere.v <- select.p.v | v <- Symbol]]
          [[seladj.v <- select.q.v | q <- adj(p), v <- Symbol]]

-- as opposed to

Cell'(p) = if init(p)==0 then Var(p) else Fixed(p,init(p))

Alpha(p) = {|select.q, done | q <- nhd(p)|}

System = || p:Coords@[Alpha(p)] Cell(p)
System' = || p:Coords@[Alpha(p)] Cell'(p)

channel done
channel select:Coords.Symbol
channel selhere, seladj:Symbol


-- System can be fixed in any order, which creates many unnecessary states,
-- so the following process Reg fixes the order of selection

Reg(ls) = if ls==<> then STOP
          else select.head(ls)?v -> Reg(tail(ls))

-- Here the the naive order of filling in squares
scanorder = <(i,j) | i <- <0..ab-1>, j <- <0..ab-1>, init((i,j))==0>

-- choose between the following, or try your own

order = scanorder
-- order = statorder -- see below

RegSys = System[|{|select|}|]Reg(order)
RegSys' = System'[|{|select|}|]Reg(order)

assert STOP [T= RegSys\{|select|}
assert STOP [T= RegSys'\{|select|}

-- We now try to compute a sensible order.

-- This function counts how many values are initially blocked from each
-- square. 

count(p) = if init(p) > 0 then 0
             else
             card({init(q) | q <- adj(p), init(q)!=0})

-- The following method of ordering the squares is based on two statistics:
-- the initial count of blocked numbers, as above
-- the number of adjacent squares that have been filled in before this one

-- On the grounds that the former does, and the latter sometimes, restricts
-- the choice for this square.  We weight these two parameters 2:1.  Clearly
-- you can vary this or customise measures by square....

-- We always select the one with the greatest count to fill in
-- The following function calculates this and the remainder:

greatest(f,<x>) = (x,<>)
greatest(f,<(p,v)>^xs) = let ((q,w),rs) = greatest(f,xs)
                       within
                          if f(w) <= f(v) then ((p,v),<(q,w)>^rs) 
                                    else ((q,w),<(p,v)>^rs)



inc(p,xs) = let A = adj(p) within
            <(q,(c,v+(if member(q,A) then 1 else 0))) | (q,(c,v)) <- xs>

orderl(<>) = <>

orderl(xs) = let ((b,v),ys) = greatest(rank,xs) within
            <b>^orderl(inc(b,ys))

rank((c,v)) = 2*c+v
                
                
statorder = orderl(<(p,(count(p),0)) | p <- Coordlist, init(p)==0>)



                     

    
          
